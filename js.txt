Обьекты
   4 папка 3 урок - чтобы обратится к свойству свойства обьекта нужно использывать точечную запись или через квадратные скобки, если записывать через выражения.
   4 папка 4 урок - значениями свойств обьектов могут быть переменные, если название свойства совпадает с названием переменной, то можна писать только название свойства.
   4 папка 5 урок - window - глобальный обьект веб-браузера; global - глобальный обьект NodeJS; globalThis - унифицированый(подходит и для браузеров и в NodeJS) глобальный обьект.
   4 папка 6 урок - метод - это свойство обьекта, которое содержит функции. В обьектах, если свойство будет содержать функцию можна задавать ее без ключевого слова function.
   4 папка 7 урок - JSON -  это формат обмена данными между компьютерами в интернете. JSON.parce(), чтобы передать JSON-строку от браузера в JS-обьект.JSON.stringify() наоборот.
Мутации обьектов: 
   5 папка 1 урок - изменяя копию обьекта меняется и оригинальный обьект потому, что они обое хранят ссылку, а не значение.
   5 папка 2 урок -  с помощью Object.assign({}, nameObject) или оператора ... можна избежать мутации обьектов, если у них нет вложеных обьектов. Чтобы полностю избежать мутации нужно воспользиваться конвертацией JSON сначала в строку, потом в обьект.
Функции:  
   6 папка 1 урок - функция - блок кода, который можна выполнять многократно. Функции могут быть: именованными, присвоена переменной, анонимной, аргументом при вызове другой функции, методом.
   6 папка 2 урок - функция всегда возвращает значение undefined, если нет инструкции return. Параметры функции действуют только внутри этой функции.Параметры -, передаваемые, значения при создании функции; аргументы -, передаваемые, значения при вызове функции.
   6 папка 3 урок - функция мутирует внешний обьект. Этого категарически не рекомендуется делать.
   6 папка 4 урок - колбэк функция - это функия, что вызывается в другой функции и не может быть вызвана без родительской функции.
   6 папка 5 урок - Правила работы с функциями:
   1. Давать названия взависимости от того, что она делае;
   2. Одна функция должна выполнять одну задачу;
   3. Не рекомендуется изменять внешние, относительно функции, переменные.
Области видимости:
   7 папка 1 урок - локальная переменная а и  глобальная переменная а - ДВЕ РАЗНЫХ ПЕРЕМЕННЫХ!
   7 папка 2 урок - функция обьявленая внутри локальной функции не может быть вызвана в глобальном поле зрения. Локальная переменная имеет больший приоритет в функции, где ее обьявили, нежели, глобальная переменная.
   7 папка 3 урок - переменные, обьявленые в функции, уничтожаются после того, как функция закончила свою работу.
   7 папка 4 урок - есть глобальная область видимости, внутри функции и внутри блока(цыкла, условия и т.д.).
   7 папка 5 урок - строгий режим не дает автоматического создания глобальных переменных.
Операторы:   
   8 папка 1 урок - Оператор - это встроеная в JS функция.Есть такие операторы:
      Арифметические: + - * /
      Сравнения: == === !== >= <=
      Присвоения: =
      Логические:  && || !
      Также есть такие текстовый операторы:
      typeof - проверка типа того или иного значения
      delete - удаление свойства обьекта
      new - создает новые екземпляры обьекта
      instance of - проверка обьекта касаемо принадлежности к тому или иному класу
   8 папка 2 урок - Операнды - переменная и выражение, с которыми работают операторы.
   8 папка 3 урок - Унарные операторы - операторы с одним операндом, например: а++ или delete obj.a . Бинарные операторы - операторы с двумя операндами, например: а = 5.
   8 папка 4 урок - Есть такие виды записей операторов:
      инфиксаная: а += 3
      префиксная: delete obj.a
      постфиксная: а++
   8 папка 5 урок - Приорететность арифметических операторов, как и в математике
   8 папка 6 урок - оператор ! возвращает всегда булевое значение, а операторы && и || одного из операндов
   8 папка 7 урок - ложными значениями называют значения, которые при конвертации даэт булевое значение фолз
   8 папка 8 урок - результатом оператора typeof всегда есть строка со значением операнда.
Логические операторы:
   9 папка 1 урок - оператор !! конвертирует любое значение в булевое
   9 папка 2 урок - оператор &&: если один операнд - ложное значение, то второй проверятсья JS не будет и оператор вернет значение ложного операнда.
   9 папка 3 урок - оператор ||: если один операнд - правдивое значение, то второй игнорируется и будет возвращено значение первого.
   9 папка 4 урок - трюк JS:
      let c = 10
      c && console.log("Done!")
      // Result: Done!
      если ж
      let c
      c && console.log("Done!")
      // Result: undefined
   9 папка 5 урок - оператор && ищет первое ложное значение, а оператор || - первое истинное
Оператор разделения на свойства:
   10 папка 1 урок - ... - унитарный префиксный оператор разделения обьекта на свойства и добавления нового свойства или перезаписывания значения старого
Конкатинация строк:
   11 папка 1 урок - Шобланная строка пример: `${Hello} ${world}`
Функциональные выражения и стрелочные функции:
   12 папка 1 урок - функциональное выражение - это функция без названия, которую зачастую используют, как анонимную колбэк функцию.
   12 папка 2 урок - срелочная функия - это анонимное выражение. стрелочная функция всегда возвращает значение выражений внутри нее.
